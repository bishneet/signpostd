Requirements :Linux (debian - ubuntu)
=====================================

compilation requirements:

> apt-get install git ocaml ocaml-compiler-libs caml4p-extra zlib1g-dev libssl-dev libnl-route-3-dev m4

tactics requirements:

> apt-get install tor openvpn privoxy 

openflow:
> apt-get install openvswitch-switch opemvswitch-datapath-dkms

> update-rc.d tor disable

> update-rc.d privoxy disable

> /etc/init.d/tor stop

> /etc/init.d/privoxy stop

Openvswitch configuration
-------------------------

Configuring openvswitch on a remote server is triky as it may lead to loss of connectivity. In order to avoid any problem,
I usually bypass the default openvswitch init script and write a small script to do the trick. The script I use is the 
following:

>#!/usr/bin/env bash 

# run with:
# screen -S ovs sudo sh init.sh
 
intf=eth0 # whichever the nme of the intf is.

modprobe -r bridge
modprobe openvswitch_mod

if [ ! -d /etc/signpost/ ]; then
  mkdir /etc/signpost/
fi

if [ ! -r /etc/signpost/conf.db ]; then
  ovsdb-tool create /etc/signpost/conf.db  /usr/share/openvswitch/vswitch.ovsschema
fi

ovsdb-server /etc/signpost/conf.db  --remote=punix:/var/run/openvswitch/db.sock --detach --monitor
ovs-vswitchd  unix:/var/run/openvswitch/db.sock --detach --monitor

ovs-vsctl add-br br0
ovs-vsctl add-port $intf 
ovs-vsctl set-controller br0 tcp:0.0.0.0:6633
ovs-vsctl set-fail-mode br0 standalone

ifconfig $intf 0.0.0.0
ifconfig br0 up 
dclient br0 -v &

echo "pls press Ctrl+C in order to stop the vm from rebooting...."
sleep 60 

shutdown -r now
>

Requirements: MacOSX 
====================

TBA

Opam code installation and signpostd dependency 
===============================================

> git clone git://github.com/OCamlPro/opam.git

> cd opam/

> make ; make install

> opam init 

> eval `opam config -env`

> opam switch 3.12.1

> opam remote -kind git -add signpostd git://github.com/crotsos/opam-repo-dev.git

> opam install ocamlgraph ssl oasis signpostd # this is to get the required libraries. 

Building signpost Code
======================

In order to build signpost source code you need to follow the following steps:

> git pull git://github.com/crotsos/signpostd.git

> cd signpostd

> make 

Running signpost
================

Signpost currently allows parametisation of the code at compile time only. In order to modify the parameters of sigpost, 
you need to modify file lib/config.ml and recompile the code. The following parameters are provided by the code:
* signpost_number : this define the name of the signpost subdomain that the device belongs too. The name of the domain will 
be d$(signpost_number).signpo.st
* ip_slash_24 : the /24 subnet of the iodine subnet. 
* external_ip : the ip that the control channel that signpost is running. 
* external_dns : the ip of the signpost dns server.
* dir : the location of the signpostd code. 
* conf_dir : the location of the signpost configuration directory. This is expected to be $dir ^ "/conf/".
* tmp_dir : the location that signpost will use to put the intermediate files generated by tactics. This is expected to $dir ^ "/tmp/".
* ns_server : the ip of the resolver that the sytem will use to service non signpost dns requests.
* signal_port : the port that the control service is running. 
* dns_port : (obsolete) the port of the signpost dns service on external_dns ip. 
* net_intf : the name of the network interfae that the system is expected to forward traffic by default. 

In order to run signpost, 2 scripts can be used: scripts/run-client and scripts/run-server. 

Before running run-client script, the use should define a correct name for the device. This is defined by the env variable
NODE_NAME. The resulting fqdn for the device will $(NODE_NAME).d$(signpost_number).signpo.st. 

In order to run the server script, you need to make sure that a folder signpostd/conf/authorized_keys exists. 

Because tor tactic has very strict requirements on the uid running the process, users must be carefull to place signpostd 
code under a domain that the files are accessible by all system users. 

Generate signpost device keys 
------------------------------

In order to generate a key pair for a signpost device you need to perform the following steps on the device. 

> openssl genrsa -out signpostd/conf/signpost.pem

> chown root:root  signpostd/conf/signpost.pem; chmod a-rwx  signpostd/conf/signpost.pem; chmod u+r  signpostd/conf/signpost.pem

> openssl rsa -in  signpostd/conf/signpost.pem -pubout -out $(NODE_NAME).pub.

The final step will provide you with a public key, and a copy of it should be placed under dir signpostd/conf/authorized_keys
In order for the keys to become effective for the device. 

